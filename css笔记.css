/* CSS：层叠样式表 
html+css 内容 JavaScript 灵魂
html:结构
css：样子*/
/* 语法 
/* css组成部分：1
div(选择器)
{color: chartreuse;}（声明） */
/*注释*/

/* 颜色 rgb:
R：红色 浅-深 0-255
G：绿色
B：蓝色 
1.rgb(0,255,0)
2.名称：red
3.16进制 #FF0000 */ 

/* 选择器
div{
    background-color: rgb(255, 0, 0)
}
作用：通过选择器选择html元素  样式-》元素
类别：
1.基本选择器 2.组合选择器 3.属性选择器 4.伪元素

1.基本选择器
*通配符 标签选择器（div  p） id选择器 class选择器 */

/* *{
    border: 1px solid black;
} */

/* div{
    border: 1px solid black;
}
p{
    border: 1px solid black;
} */

/* id选择器 */
/* #wc {
    font-size: 100px;
    color: aqua;
} */
/* *#wc{
    color: blue;
    font-size: 200px
}(通配符+#) */

/* 编程：
id ->唯一性 -》人的身份证号码
1.每个人：有且仅有一个号码
2.人和人之间号码不一样

css 1.一个号码 元素-只能有一个id
2.人和人号码不一样 
元素 id不能相同 */

/* class选择器 */
/* .wc{
    font-size: 200px
}
.wc{color: coral
} */

/* class->css
id->js */

/* 原理：
1.优先原则：后解析的内容 会覆盖掉之前解析的内容 
2.继承原则：嵌套里面的标签 会拥有外部标签的某些样式
            子元素可以继承父元素的属性 */

/* 继承原则
1.跟文本、文字样式 可以被继承 */

/* div.txt{
    color: red; 文字的颜色
    border: 1px solid black;
}
p{
    border: 1px solid black;
} */

/* 2.块级元素 宽度如果不被设置-》继承父元素宽
     高-》由内容决定 */
/* div.txt{
    width: 200px;
    height: 200px;
}

div,p{
    border: 1px solid black;
} */

/* 优先原则
1.同一个选择器P:文件执行从上往下执行，解析
2.同一类型的选择器：从上往下执行，解析
3.不同类型的选择器：优先级
先解析低优先级-》高优先级：*--< div--< class--< id （精确性）
4.外部样式 内部样式 合并之后一起解析
先外部样式-->内部样式
5.内联样式：
外部+内部样式解析完了之后，才解析内联样式
6.加了important字段样式最后解析 */

/* 优先原则：-》选择器
1.同一个选择器:文件执行从上往下执行，解析 */
/* div{
    color: aqua;
    color: blue;
} */

/* <div>div1</div>-》样子 解析
color:aqua ---color:blue  */

/* 2.同一类型的选择器：从上往下执行，解析 */

/* div{
    background-color: red;
}
div{background-color: aqua;
    }
<div>div1</div> background-color:red --background-color:auqa

.bg1{
    background-color: chartreuse
}
.bg2{
    background-color: coral;
}
bg1---bg2（和右边有关） */

/* 3.不同类型的选择器：选择器本身的优先级
先解析低优先级的-》高优先级 =》先低后高 */
/* *--< div--< class--< id （精确性） */

/* div{
    background-color: red;
}
.bg1{
    background-color: green;
} */
/* 先red-->green */

/* 4.外部样式 内部样式  合并之后一起解析
先外部样式-》内部样式 ->合并-解析 */
/* div{
    background-color: yellow;
    font-size: 100px;
    } */

/* 1，合并
div{
    background-color: yellow;
    font-size: 100px;
    }
    div{
        background-color: red;
        }
<div class="bg1">div1</div>
--》<div class="bg1">div1</div>
   background-color: red;
   font-size: 100px; */

/* 5.内联样式：
外部样式+内部样式之后才解析内联样式 */
/* 外部样式：
div{
    background-color: yellow;
    font-size: 10px;
    } */
/* 内部样式：
div{
    background-color: red;
    } */

/* 合并：
div{
    background-color: yellow;
    font-size: 10px;
    }

div{
    background-color: red;
    }

(内联样式)<div class="bg1" style="font-size: 200px">div1</div>
background-color: yellow;--red ;
font-size: 10px;--200px; */


/* 6.加了important字段的，最后执行 */
/* div{
    background-color: green!important;
}
div{
    background-color: yellow;
    font-size: 30px;} */

/* 组合选择器：把基本选择器通过特殊符号串在一起 */

/* 分组选择器 div,p,ul */
/* div,p{
    background-color: blue;
    color: red;
}
p{
    font-size: 30px;
} */

/* 嵌套选择器
把多个标签用空格隔开
div p ->p（div）只要p标签在div里面 就能生效
div p{
    background-color: blue;
    color: red;
    font-size: 20px;
} */

/* 子选择器：
div > p  p(父标签必须是div)
div>p{
    background-color: blue;
    color: red;
    font-size: 20px;
}  */

/* 相邻同级选择器：
div+p->p( div)
div+p{
    background-color: blue;
    color: red;
    font-size: 20px;
} */


/* 属性选择器
基本选择器
[属性=值]
[属性~=值]空格隔开
[属性^=值]以某某开始
[属性$=值]以某某结束
*/

/* p[title$=cc]{
    background-color: blue;
    color: red;
    font-size: 20px;
} */


/* 伪元素选择器
伪元素:假的->真的(我们自己写的) */
/* 开始:before
结束:after */

/* p::before {
    content: "before";
}
p::after {
    content: "after";
}
p{
    background-color: aqua;
    font-size: 50px;
    color: blue;
} */

/* 块元素
第一个字母: :first-letter
第一行: :first-line */

/* p::first-letter{
    color: aqua;
    font-size: 50px;
}
p::first-line{
    color: aqua;
    font-size: 100px;
} */

/* 伪类 选择器
    状态 */

    /* 背景
body{
    background-color: red;
    background-image: url('one.jpg');
    background-repeat: no-repeat;  
    (平铺,沿着某某轴)
    background-attachment: fixed;
    fixed(固定)
    background-position:center top;
     x:left center right  posittion(位置)
    y:top  center bottom
    height: 2000px;
    background: color image repeat attachment  position 
} */

/* body{ */
    /* font-family: "微软雅黑","Microsoft yahei";
    font-size: 30px; 
    font-weight: normal;
    normal  lighter  bold (自己宽度)
    font-style: italic;
    (italic 斜体)
    font: style weight size/line-height font-family
    font:至少设置size 和font family */
    /* font: italic 30px/150px "微软雅黑";  */
    /* 系统默认16px=1em  1.5em=1.5*16 */
/* }
p{
    width: 200px;
} */



    /* color: red */
    /* 字符间距 */
    /* letter-spacing: 0px */
    /* 空格的间距 */
    /* word-spacing: 0px; */

    /* direction: ltr; left->to->right */
    /* text-decoration: line-through; */

    /* 文字的对齐方式 center left right justify */
    /* text-align:left; */

    /* 缩进  */
    /* text-indent:50px; */


    /* 英文大小写字母
    text-transform:upercase;
                   lowercase;
                   capitalize; */
    /* text-transform: uppercase; */

    /* 省略号:wihite-space:nowrap;
    overflow:hidden; nowrap(包裹);overflow(隐藏)
    text-overflow:ellipsis ;
clip(默认状态) ellipsis(省略号) */
    
    /* width: 250px;
    white-space: nowrap;   
    overflow: hidden;
    text-overflow: ellipsis;
    background-color: aqua; */


    /* word-spacing: 10px;
    direction: rtl; */
    /* text-decoration:overline; */
    /* text-align: justify; */
    /* text-transform: lowercase; */

    /* letter-spacing: -5px; */
    /* word-spacing: -10px; */
    /* text-decoration: underline; */
    /* text-align: right; */
    /* text-transform: capitalize; */
p{
    background-color: aqua;
    width: 300px;
}
    img{
        width: 250px;
        /* vertical-align: top */
        /* 垂直对齐
        vertical-align:top center bottom
        100%->1个行高 */
        float: left;
    }
